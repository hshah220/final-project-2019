//Hemil Mehul Shah
//Final Project

#include <iostream>
#include <string>
#include <vector>
#include <cctype>
using namespace std;

bool debug = false;

int static total;

enum en_DIRS {NORTH, EAST, SOUTH, WEST};
enum en_ROOMS {L, D1, D2, D3, D4, D5, A1, A2, A3, A4, A5, BC1, BC2, BC3, BC4, BC5, RR1, RR2, RR3, RR4, RR5, R1, R2,R3, R4, R5, C1, C2, C3, C4, C5, STORAGE };
//Enable 1 or more these verbs other than those already enabled (LOOK & OPEN)
enum en_VERBS {GET, DROP, USE, OPEN, CLOSE, EXAMINE, INVENTORY, LOOK, HELP, QUIT};
enum en_NOUNS {BAG, COFFEE, TICKET, PASSPORT, MONEY, PIZZA, PILLOW, WATER, DUFFEL, CLOTHES, LAPTOP, DOOR, BOOK, BAGEL, CANDY};

const int NONE = -1;
const int DIRS = 4;
const int ROOMS = 35;
const int VERBS = 10;
const int NOUNS = 15;

class words
{
private:
	int code;
public:
	words(int givenCode = 1, string givenWord = "LOOK")
	{
		setCode(givenCode);
		word = givenWord;	
	}
	string word;				// noun inherits this
	int getCode()
	{
		return code;
	}
	void setCode(int givenCode)
	{
		code = givenCode;
	}
	~words()
	{
		word.clear();
		code = NONE;
	}
};

class room
{
private:
	string description;
public:
	string detailDesc;
	int exits_to_room[DIRS];
	room(string givenDescription, string givenDetDesc, int north, int east, int south, int west)
	{
		setDescription(givenDescription);
		detailDesc = givenDetDesc;
		exits_to_room[NORTH] = north;
		exits_to_room[EAST] = east;
		exits_to_room[SOUTH] = south;
		exits_to_room[WEST] = west;	
		total++;
	}
	room(string givenDescription)
	{
		setDescription(givenDescription);
	}
	string getDescription()
	{
		return description;
	}
	void setDescription(string givenDescription)
	{
		description = givenDescription;
	}
	~room()
	{
		description.clear();
		exits_to_room[NORTH] = NONE;
		exits_to_room[EAST] = NONE;
		exits_to_room[SOUTH] = NONE;
		exits_to_room[WEST] = NONE;
	}
};

class noun : public words
{
private:
	int location;
public:
	noun( string givenWord = "NONE", int givenCode = NONE, string givenDescription = "LOADING", bool can_carry = NONE, int givenLocation = L)
	{
		word = givenWord;
		code = givenCode;
		description = givenDescription;
		setLocation(givenLocation);
	}
	string description;
	int code;
	bool can_carry;
	int getLocation()
	{
		return location;
	}
	void setLocation(int givenLocation)
	{
		location = givenLocation;
	}
	~noun()
	{
		word = " ";
		code = 0;
		description = " ";
		can_carry = NONE;
		location = 0;
	}
};

void set_rooms(vector<room> &rms)
{
	if(total < 45)
	{
		rms.push_back(room("lobby", "The Centre of the airport", D1, C1, A1, RR1));
	
		rms.push_back(room("departure one", "Terminal where planes depart to India", RR2, R3, L, D2));
		rms.push_back(room("departure two", "Terminal where planes depart to Tanzania", A2, D1, NONE, NONE));
		rms.push_back(room("departure three", "Terminal where planes depart to Egypt", A5, C5, RR4, R1));
		rms.push_back(room("departure four", "Terminal where planes depart to Dubai", C3, NONE, NONE, NONE));
		rms.push_back(room("departure five", "Terminal where planes depart to Canada", NONE, C4, NONE, NONE));
		
		rms.push_back(room("arrival one", "Terminal where planes arrive from India", L, BC1, RR3, R2));
		rms.push_back(room("arrival two", "Terminal where planes arrive from Tanzania", BC2, NONE, D2, C2));
		rms.push_back(room("arrival three", "Terminal where planes arrive from Egypt", NONE, BC3, NONE, C5));
		rms.push_back(room("arrival four", "Terminal where planes arrive from Dubai", NONE, C3, NONE, BC4));
		rms.push_back(room("arrival five", "Terminal where planes arrive from Canada", BC5, NONE, D3, R1));

		rms.push_back(room("baggage claim one", "Baggage carousels where bags India from can be found.", NONE, NONE, NONE, A1));
		rms.push_back(room("baggage claim two", "Baggage carousels where bags Tanzania from can be found.", NONE, NONE, A2, NONE));
		rms.push_back(room("baggage claim three", "Baggage carousels where bags Egypt from can be found.", NONE, NONE, NONE, A3));
		rms.push_back(room("baggage claim four", "Baggage carousels where bags Dubai from can be found.", NONE, A4, NONE, NONE));
		rms.push_back(room("baggage claim five", "Baggage carousels where bags Canada from can be found.", NONE, NONE, A5, NONE));

		rms.push_back(room("rest room one", "Rest Room with shower.", NONE, L, NONE, NONE));
		rms.push_back(room("rest room two", "Rest Room with swimming pool.", NONE, NONE, D1, NONE));
		rms.push_back(room("rest room three", "Rest Room with hot tub.", A1, NONE, NONE, NONE));
		rms.push_back(room("rest room four", "Rest Room with gold sinks.", D3, NONE, C3, NONE));
		rms.push_back(room("rest room five", "Rest Room with diamond toilet seats.", NONE, NONE, C2, NONE));
		
		rms.push_back(room("Chipotle", "Famous for burrito bowls.", NONE, D3, NONE, C1));
		rms.push_back(room("Dominos", "Famous for 7.99 Medium Pan Pizza.", NONE, A1, NONE, C4));
		rms.push_back(room("Tup Tim Thai", "Famous for Thai food.", NONE, NONE, NONE, D1));
		rms.push_back(room("Meddy's", "Famous for Mediterranean food", NONE, C2, NONE, NONE));
		rms.push_back(room("Taco Bell", "Famous for Tacos.", NONE, NONE, NONE, C3));

		rms.push_back(room("Starbucks", "Famous for different unique flavors.", NONE, R1, NONE, L));
		rms.push_back(room("Dunkin Donuts", "Famous for Donuts and Coffee.", RR5, A2, NONE, R4));
		rms.push_back(room("Krispy Kreme", "Famous for free fresh-made donuts.", RR4, R5, D4, A4));
		rms.push_back(room("Kung-Fu Tea", "Famous for flavored Green Tea.", NONE, R2, NONE, D5));
		rms.push_back(room("Scooter's Coffee", "Famous for hot chocolate.", NONE, A3, NONE, D3));

		rms.push_back(room("Storage", "Used to store the inventory.", NONE, NONE, NONE, NONE));
	}
	else 
	{
		cout<<"Not today";
		return ;
	}
}

void set_directions(vector<words> &dir)
{
	dir.push_back(words(NORTH, "NORTH"));
	dir.push_back(words(EAST, "EAST"));
	dir.push_back(words(SOUTH, "SOUTH"));
	dir.push_back(words(WEST, "WEST"));
}

void set_verbs(vector<words> &vbs)
{
	//enum en_VERBS {GET, DROP, USE, OPEN, CLOSE, EXAMINE, INVENTORY, LOOK, EAT, DRINK};
	vbs.push_back(words(GET, "GET")); //enabled
	vbs.push_back(words(DROP, "DROP"));
	vbs.push_back(words(USE, "USE"));
	vbs.push_back(words(OPEN, "OPEN"));
	vbs.push_back(words(CLOSE, "CLOSE"));
	vbs.push_back(words(EXAMINE, "EXAMINE")); //enabled
	vbs.push_back(words(INVENTORY, "INVENTORY"));
	vbs.push_back(words(LOOK, "LOOK")); //original enabled
	vbs.push_back(words(HELP, "HELP")); //new added and enabled
	vbs.push_back(words(QUIT, "QUIT")); //new added and enabled
}

void set_nouns(vector<noun> &nns)
{
	//enum en_NOUNS {BAG, COFFEE, TICKET, PASSPORT, MONEY, PIZZA, PILLOW, WATER, DUFFEL, CLOTHES, LAPTOP, DOOR, BOOK, BAGEL, CANDY};
	nns.push_back(noun("BAG", BAG, "a luggage bag", true, BC1));
	nns.push_back(noun("COFFEE", COFFEE, "a mug of coffee", true, C1));
	nns.push_back(noun("TICKET", TICKET, "a flight ticket", true, L));
	nns.push_back(noun("PASSPORT", PASSPORT, "a passport", true, NONE));
	nns.push_back(noun("MONEY", MONEY, "Some money", true, NONE));
	nns.push_back(noun("PIZZA", PIZZA, "a pizza", false, R1));
	nns.push_back(noun("PILLOW", PILLOW, "a travel pillow", true, D1));
	nns.push_back(noun("WATER", WATER, "a water bottle", true, R2));
	nns.push_back(noun("DUFFEL", DUFFEL, "a duffel bag", true, BC2));
	nns.push_back(noun("CLOTHES", CLOTHES, "a pair of clothes", true, RR1));
	nns.push_back(noun("LAPTOP", LAPTOP, "a 13' Macbook", true, A1));
	nns.push_back(noun("DOOR", DOOR, "a flight door", false, D4));
	nns.push_back(noun("BOOK", BOOK, "a novel", true, C2));
	nns.push_back(noun("BAGEL", BAGEL, "a bagel", true, C3));
	nns.push_back(noun("CANDY", CANDY, "Some candy", true, D2));
}

void section_command(string Cmd, string &wdl, string &wd2)
{
	if (debug){
		cout<<"starting section command.\n";
	}
	
	string sub_str;
	vector<string> words;
	char search = ' ';
	size_t i, j;
	for(i = 0; i < Cmd.size(); i++)
	{
		if(Cmd.at(i) != search)
		{
			sub_str.insert(sub_str.end(), Cmd.at(i));
		}
		if(i == Cmd.size() - 1)
		{
			words.push_back(sub_str);
			sub_str.clear();
		}
		if(Cmd.at(i) == search)
		{
			words.push_back(sub_str);
			sub_str.clear();
		}
	}
	for(i = words.size() - 1; i > 0; i--)
	{
		if(words.at(i) == "")
		{
			words.erase(words.begin() + i);
		}
	}
	for(i = 0; i < words.size(); i++)
	{
		for(j = 0; j < words.at(i).size(); j++)
		{
			if(islower(words.at(i).at(j)))
			{
				words.at(i).at(j) = toupper(words.at(i).at(j));
			}
		}
	}
	if(words.size() == 0)
	{
		cout << "No command given" << endl;
	}
	if(words.size() == 1)
	{
		wdl = words.at(0);
	}
	if(words.size() == 2)
	{
		wdl = words.at(0);
		wd2 = words.at(1);
	}
	if(words.size() > 2)
	{
		cout << "Command too long. Only type one or two words (direction or verb and noun)" << endl;
	}
}

void look_around(int loc, vector<room> &rms, vector<words> &dir, vector<noun> &nns)
{
	if (debug)
	{
		cout<<"starting Look Around.\n";
		cout << "loc # = " << loc << endl;
		cout << "Just for testing rms[0].desc = " << rms[0].getDescription() << endl;
	}
	int i;
	cout << "I am in a " << rms[loc].getDescription() << "." << endl;
	for(i = 0; i < DIRS; i++)
	{
		if(rms[loc].exits_to_room[i] != NONE)
		{
			cout << "There is an exit " << dir[i].word << " to (a) " << rms[rms[loc].exits_to_room[i]].getDescription() << "." << endl;
		}
	}
	for(i = 0; i < NOUNS; i++)
	{
		if(nns[i].getLocation() == loc)
		{
			cout << "I see " << nns[i].description << "." << endl;
		}
	}
}

bool parser(int &loc, string wd1, string wd2, vector<words> &dir, vector<words> &vbs, vector<room> &rms, vector<noun> &nns)
{
	if(debug)
	{
		cout << "Starting Parser.\n";
		cout << "loc = " << loc << ", wd1 = " << wd1 << ", wd2 = " << wd2 << endl;
	}
	static bool door_state = false; //false is a closed door.
	int i;
	for(i = 0; i < DIRS; i++)
	{
		if(wd1 == dir[i].word)
		{
			if(rms[loc].exits_to_room[dir[i].getCode()] != NONE)
			{
				loc = rms[loc].exits_to_room[dir[i].getCode()];
				cout << "I am now in (a) " << rms[loc].getDescription() << "." << endl;
				return true;
			}
			else
			{
				cout << "No exit that way. " << endl;
				return true;
			}
		}
	}
	int NOUN_MATCH = NONE;
	int VERB_ACTION = NONE;
	for(i = 0; i < VERBS; i++)
	{
		if(wd1 == vbs[i].word)
		{
			VERB_ACTION = vbs[i].getCode();
			break;
		}
	}
	if(wd2 != "")
	{
		for(i = 0; i < NOUNS; i++)
		{
			if(wd2 == nns[i].word)
			{
				NOUN_MATCH = nns[i].code;
				break;
			}
		}
	}
	if(VERB_ACTION == NONE)
	{
		cout << "No valid command entered. " << endl;
		return true;
	}

	if(VERB_ACTION == LOOK)
	{
		look_around(loc, rms, dir, nns);
		return true;
	}

	if(VERB_ACTION == EXAMINE)
	{
		cout << rms[loc].detailDesc << endl;
	}

	//GET, DROP, USE, OPEN, CLOSE, EXAMINE, INVENTORY, LOOK, HELP, QUIT
	if(VERB_ACTION == HELP)
	{
		cout << "You can do the following (if possible): \n";
		cout << "LOOK -> to look around the room\n";
		cout << "GET -> to get an item\n";
		cout << "DROP -> to drop an item\n";
		cout << "USE -> to use an item\n";
		cout << "OPEN -> to open the door\n";
		cout << "CLOSE -> to close the door\n";
		cout << "EXAMINE -> to examine the room you are in\n";
		cout << "INVENTORY -> to display your inventory\n";
		cout << "QUIT -> to quit the game\n";
		cout << "NORTH -> to exit north of a room\n";
		cout << "EAST -> to exit east of a room\n";
		cout << "SOUTH -> to exit south of a room\n";
		cout << "WEST -> to exit west of a room\n";
		cout << "HELP -> to re-display these command options\n";
	}

	if(VERB_ACTION == QUIT)
	{
		cout << "I am glad that you decided to play this game!\n";
		return 0;
	}

	//noun( string givenWord = "NONE", int givenCode = NONE, string givenDescription = "LOADING", bool can_carry = NONE, int givenLocation = L)
	if(VERB_ACTION == GET)
	{
		for(i = 0; i < NOUNS; i++)
		{
			if(nns[i].getLocation() == loc)
			{
				cout << "You have collected " << nns[i].description << "." << endl;
				nns[i].setLocation(STORAGE); 
			}
		}
	}

	if(VERB_ACTION == DROP)
	{
		for(i = 0; i < NOUNS; i++)
	 	{
			if(wd2 == nns[i].word)
			{
				if(nns[i].getLocation() == STORAGE)
				{
					cout<<"You have dropped " << nns[i].description << endl;
					nns[i].setLocation(loc);
				}
			}	 		
		}
	}

	if(VERB_ACTION == USE)
	{
		for(i = 0; i < NOUNS; i++)
	 	{
			if(wd2 == nns[i].word)
			{
				if(nns[i].getLocation() == STORAGE)
				{
					cout<<"You have used " << nns[i].description << endl;
					nns[i].setLocation(-2);
				}
			}	 		
		}
	}

	if(VERB_ACTION == INVENTORY)
	{
		for(int i = 0; i < NOUNS; i++)
		{
			if(nns[i].getLocation() == STORAGE)
			{
				cout << "You have " << nns[i].description << " in your inventory!" << endl;
			}
		}	
	}

	if(VERB_ACTION == OPEN)
	{
		if(NOUN_MATCH == DOOR)
		{
			if(loc == D4)
			{
				if(door_state == false)
				{
					door_state = true;
					rms[D4].exits_to_room[NORTH] = C3;
					rms[DOOR].exits_to_room[NORTH] = D4;
					nns[DOOR]. description.clear();
					nns[DOOR]. description.assign("an open flight door");
					cout << "I have opened the door." << endl;
					return true;
				}
				else if(door_state == true)
				{
					cout << "The door is already open." << endl;
					return true;
				}
			}
			else 
			{
				cout << "There is no door to open here." << endl;
				return true;
			}
		}
		else
		{
			cout << "Opening that door is not possible" << endl;
			return true;
		}
	}

	if(VERB_ACTION == CLOSE)
	{
		if(NOUN_MATCH == DOOR)
		{
			if(loc == D4)
			{
				if(door_state == true)
				{
					door_state = false;
					rms[D4].exits_to_room[NORTH] = C3;
					rms[DOOR].exits_to_room[NORTH] = D4;
					nns[DOOR]. description.clear();
					nns[DOOR]. description.assign("a closed flight door");
					cout << "I have closed the door." << endl;
					return false;
				}
				else if(door_state == false)
				{
					cout << "The door is already closed." << endl;
					return false;
				}
				else 
				{
					cout << "There is no door to open here." << endl;
					return false;
				}
			}
		}
		else
		{
			cout << "Closing is not possible" << endl;
			return false;
		}
	}
	return false;
}

int main() 
{
	if(debug)
	cout<<"Entering main";
	
	string command;
	string word_1;
	string word_2;
	
	if(debug)
	cout<<"Completed first set";

	vector<room> rooms; 
	set_rooms(rooms);

	if(debug) 
	{
		cout << "Just for testing rms[0].desc = " << rooms[0].getDescription() << endl;
	}
	
	vector<words> directions;
	set_directions(directions);

	vector<words> verbs;
	set_verbs(verbs);

	vector<noun> nouns;
	vector<noun> inv;
	set_nouns(nouns);

	int location = L;

	while(word_1 != "QUIT")
	{
		command.clear();
		cout << "What shall I do? ";
		getline(cin, command);
		word_1.clear();
		word_2.clear();
		section_command(command, word_1, word_2);
		parser(location, word_1, word_2, directions, verbs, rooms, nouns);
	}
	return 0;
}
